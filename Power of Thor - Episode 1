```
// Power of Thor - Episode 1
// A basic problem to go a little bit further with conditions and variables: your program must allow Thor to reach the coordinates of the light of power in a 2D field.

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 * ---
 * Hint: You can use the debug stream to print initialTX and initialTY, if Thor seems not follow your orders.
 **/

int main()
{
    int light_x; // the X position of the light of power
    int light_y; // the Y position of the light of power
    int initial_tx; // Thor's starting X position
    int initial_ty; // Thor's starting Y position
    cin >> light_x >> light_y >> initial_tx >> initial_ty; cin.ignore();
    
    string direction; // variable for remembering directions
    int new_tx = initial_tx; // variables for a new location
    int new_ty = initial_ty;

    // game loop
    while (1) {
        int remaining_turns; // The remaining amount of turns Thor can move. Do not remove this line.
        cin >> remaining_turns; cin.ignore();

        // Write an action using cout. DON'T FORGET THE "<< endl"
        // To debug: cerr << "Debug messages..." << endl;

        if (light_x > initial_tx & light_y > initial_ty) // the condition for choosing a direction based on the difference in coordinates
        {
            direction = "SE"; // SE if we need increase x and y coordinate
            new_tx = initial_tx+1;
            new_ty = initial_ty+1;
        }
        if (light_x > initial_tx & light_y < initial_ty)
        {
            direction = "NE"; // NE if we need increase x and decrease y coordinate
            new_tx = initial_tx+1;
            new_ty = initial_ty-1;
        }
        if (light_x > initial_tx & light_y == initial_ty)
        {
            direction = "E"; // E if we need increase x and lock in y coordinate
            new_tx = initial_tx+1;
        }
        if (light_x < initial_tx & light_y > initial_ty)
        {
            direction = "SW"; // SW if we need decrease x and increase y coordinate
            new_tx = initial_tx-1;
            new_ty = initial_ty+1;

        }
        if (light_x < initial_tx & light_y < initial_ty) 
        {
            direction = "NW"; // NW if we need decrease x and decrease y coordinate
            new_tx = initial_tx-1;
            new_ty = initial_ty-1;
        }
        if (light_x < initial_tx & light_y == initial_ty)
        {
            direction = "W"; // W if we need decrease x and lock in y coordinate
            new_tx = initial_tx-1;
        }
        if (light_x == initial_tx & light_y > initial_ty)
        {
            direction = "S"; // S if we need  lock in x and increase y coordinate
            new_ty = initial_ty+1;
        }
        if (light_x == initial_tx & light_y < initial_ty)
        {
            direction = "N"; // W if we need  lock in x and decrease y coordinate
            new_ty = initial_ty-1;
        }
        initial_tx = new_tx; //assign new coordinates after all conditions
        initial_ty = new_ty;

        // A single line providing the move to be made: N NE E SE S SW W or NW
        cout << direction << endl;
    }
}
